<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://altfool.github.io</id>
    <title>Always-The-Fool</title>
    <updated>2021-10-23T02:41:47.829Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://altfool.github.io"/>
    <link rel="self" href="https://altfool.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://altfool.github.io/images/avatar.png</logo>
    <icon>https://altfool.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Always-The-Fool</rights>
    <entry>
        <title type="html"><![CDATA[集成Rapsberry Pi和电动轮椅 with R-Net 设备]]></title>
        <id>https://altfool.github.io/post/ji-cheng-rapsberry-pi-he-dian-dong-lun-yi-with-r-net-she-bei/</id>
        <link href="https://altfool.github.io/post/ji-cheng-rapsberry-pi-he-dian-dong-lun-yi-with-r-net-she-bei/">
        </link>
        <updated>2021-10-20T13:39:27.000Z</updated>
        <content type="html"><![CDATA[<p>之前和轮椅相关的工作，包括在轮椅上安装imu，和intel realsense D435i和L515相机进行数据采集（用rosbag）和构建高程图（<a href="https://github.com/ANYbotics/elevation_mapping">看这里</a>）。当然啦，还包括基础地用SLAM 进行状态估计和建图，比如用<a href="http://introlab.github.io/rtabmap/">RTAB-MAP</a>。不过个人感觉这些工作和轮椅的交互性并不是很强，而且只是基本的把设备和电脑架设在轮椅之上，真的把轮椅只当个“工具椅”。为了更好的使用工具椅，我们期待能够做一些更复杂的工作，比如导航、避障等。其实不论在电脑上还是RAspberry Pi (RPi) 上，我们都已经能够根据出发点、目的地生成一系列的waypoints，那么我们当前遇到的一个小问题就是如何成功、有效地和轮椅交互，控制轮椅基于waypoints运动。本文就是为了解决这个问题的。尝试利用RPi和电动轮椅进行集成，来做到控制轮椅运动。<br>
本人对机械控制就是个小白，搜索了一些相关资料，大概有了基本思路，先列举下我找的资料：</p>
<ol>
<li><a href="https://www.youtube.com/watch?v=jDMYnpxqKHw">OPEN-SOURCE PROJECT: Remote control a power-wheelchair with a phone!</a><br>
这个就是一个youtube视频描述如何用RPi和轮椅互联，并用手机通过蓝牙控制轮椅运动的。它作者列出了一些很有用的资源（如下）。</li>
<li><a href="https://github.com/redragonx/can2RNET">PGDT R-Net CAN library for power-wheelchairs with R-Net electronics</a><br>
这个repo的东西就是关于如何用RPi + CAN + R-Net操控轮椅的。<a href="https://www.cw-industrialgroup.com/Products/Mobility-Vehicle-Solutions/R-net">R-Net</a>是一些轮椅带有的控制模块。CAN 是Controller Area Network (CAN) ，它帮助RPi进行总线控制。用CAN的原因是，它能把RPi和轮椅的R-Net连接起来（我们下面会看到R-Net的特殊插口形状）。</li>
<li><a href="https://discord.gg/mYqJSS5">Discord</a><br>
其实很多人也在hack电动轮椅，进入discord你会发现有很多大佬给的instructions和信息，真的很有帮助。</li>
<li>其他连接<br>
https://github.com/teslaistra/wheelchair<br>
https://github.com/redragonx/r-net-bluetooth-control-app</li>
</ol>
<p>所以总体上，我们需要RPi，PiCAN(如<a href="https://copperhilltech.com/pican-2-can-bus-interface-for-raspberry-pi/">PiCAN2</a>)和电动轮椅带R-Net设备我们就可以基本控制了。<br>
下面我们说下轮椅设备，我们实验室目前使用的是Permobil C400，其实我都不太懂它的具体结构，网上英文版的<a href="https://www.permobil.com/us/wp-content/uploads/2016/12/SM-C400-Older.pdf">说明书</a>把我看的头大。关键我给它公司打电话，它技术人员还表示，他们不会为如何hack轮椅提供任何帮助，说会违反FDA。唉，然后with limited help from them，我只能自己找网上的大神帮忙了。<br>
轮椅：<br>
<img src="https://altfool.github.io/post-images/1634955572787.jpg" alt="" width="400" loading="lazy"><br>
它右侧有一个VSI joystick的控制面板，用于控制轮椅运动。这个VSI joystic就是用的R-Net结构和轮椅互联的。我当时看到这个都想把它断连，然后把RPi接上去。幸好，这个轮椅背部提供了多个R-Net结构，所以我们可以把手控VSI joystick和RPi同时接入而不冲突。</p>
<p>R-Net 结构：<br>
<img src="https://altfool.github.io/post-images/1634956078512.jpg" alt="" width="400" loading="lazy"><br>
<img src="https://altfool.github.io/post-images/1634956097910.jpg" alt="" width="400" loading="lazy"><br>
这个R-Net就是VSI joystick控制器的所属的那个。</p>
<p>轮椅背部多个R-Net结构：<br>
<img src="https://altfool.github.io/post-images/1634956146129.jpg" alt="" width="400" loading="lazy"><br>
<img src="https://altfool.github.io/post-images/1634956152351.jpg" alt="" width="400" loading="lazy"><br>
这里可以看到轮椅背部其实提供了很多个R-Net结构。所以我们可以放过它自带的VSI joystick的控制接口啦😁。网上还有人把两个VSI joystick控制接口都插上轮椅，一起运作的，见这个<a href="https://www.youtube.com/watch?v=cfHHb-t7hkQ">视频</a>。说是，有些电动轮椅一出厂，就有主/副控制器（接口）。</p>
<p>接下来就是根据discord里面大佬的instructions和信息，选择和我们这个轮椅适配的RPi和PiCAN，然后接上进行测验。之所以选适配，是因为discord里面有大佬描述了电压不配/充足的问题，所以建议看看discord里面大佬的留言，选择合适的。</p>
<p>【To be continued】</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CMakeList里的package/头文件夹名/库文件夹名的对照]]></title>
        <id>https://altfool.github.io/post/cmakelist-li-de-packagetou-wen-jian-jia-ming-ku-wen-jian-jia-ming-de-dui-zhao/</id>
        <link href="https://altfool.github.io/post/cmakelist-li-de-packagetou-wen-jian-jia-ming-ku-wen-jian-jia-ming-de-dui-zhao/">
        </link>
        <updated>2021-10-16T14:13:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-include-package-into-cmake"><strong>1. Include Package into CMake</strong></h3>
<p>    开始接触CMAKE创建c++工程写SLAM。 CMake里面调用其他库的方法已经了解了，但是每次调用的时候那个package名/头文件夹名和库文件夹名总让人很困惑。就不明白为啥不一致（强迫症的克星啊），也许以后能理解这一点。<br>
    目前加入其他库的指令有：</p>
<ol>
<li><strong>find_package(xxx REQUIRED)</strong>,<br>
if not in system path, you can try this : <strong>find_package(xxx REQUIRED PATHS xxx)</strong></li>
<li><strong>include_directories(${xxx_INCLUDE_DIRS})</strong><br>
注意，这里的&quot;_INCLUDE_DIRS&quot;全部要大写，而xxx则是分情况；</li>
<li><strong>target_link_libraries(xxx ${xxx_LIBRARIES})</strong><br>
这里的&quot;_LIBRARIES&quot;同样全部大写，有的库只要写&quot;_LIBS&quot;作为后缀也能用，比如&quot;OpenCV_LIBS&quot;，我真的很讨厌这样（played with 几个不同的库包过），干脆就全部写完整的libraries就好了。</li>
</ol>
<h3 id="2-packages-in-slamc"><strong>2. Packages in SLAM/C++</strong></h3>
<p>    目前接触到的库包包含了：<strong>Eigen</strong>, <strong>Sophus</strong>, <strong>OpenCV</strong>, <strong>Ceres</strong>, <strong>g2o</strong>, <strong>Pangolin</strong>等<br>
(Sophus和Eigen,Pangolin, OpenCV库一起出现的时候，记得把Sophus放最后。。。或者自己尝试调顺序，因为它有时候会链接出错。。。。迷之bug)</p>
<h3 id="3-reference"><strong>3. Reference</strong></h3>
<p>    <strong>包名/头文件夹/库文件夹对照如下：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">&lt;package&gt;</th>
<th style="text-align:center">&lt;include_directory&gt;</th>
<th style="text-align:center">&lt;link_library&gt;</th>
<th style="text-align:center">#include &lt;名字&gt;</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>Eigen3</strong></td>
<td style="text-align:center"><strong>EIGEN3_</strong></td>
<td style="text-align:center"># (only header files)</td>
<td style="text-align:center">Eigen/xxx</td>
</tr>
<tr>
<td style="text-align:center"><strong>Sophus</strong></td>
<td style="text-align:center"><strong>SOPHUS_</strong></td>
<td style="text-align:center"># (only header files)</td>
<td style="text-align:center">sophus/xxx</td>
</tr>
<tr>
<td style="text-align:center">OpenCV</td>
<td style="text-align:center">OpenCV_</td>
<td style="text-align:center">OpenCV_</td>
<td style="text-align:center">opencv2/xxx</td>
</tr>
<tr>
<td style="text-align:center"><strong>Ceres</strong></td>
<td style="text-align:center"><strong>CERES_</strong></td>
<td style="text-align:center"><strong>CERES_</strong></td>
<td style="text-align:center">ceres/xxx</td>
</tr>
<tr>
<td style="text-align:center"><strong>G2O</strong></td>
<td style="text-align:center"><strong>G2O_</strong></td>
<td style="text-align:center"><strong>G2O_</strong></td>
<td style="text-align:center">g2o/xxx</td>
</tr>
<tr>
<td style="text-align:center">Pangolin</td>
<td style="text-align:center">Pangolin_</td>
<td style="text-align:center">Pangolin_</td>
<td style="text-align:center">pangolin/xxx</td>
</tr>
</tbody>
</table>
<p>    有些时候include_directory用全大写或者原包名都是可以的，太混乱了，我就按自己的格式记录的。有些可能还和package版本相关，如果CMake添加不成功，可以看看path，包名啥的。<br>
    另外，G2O编译吐了，从github官网上下载的是成功的，你也能成功编译并添加到系统里，不过它就是link不了。才发现bleeding edge版本的经常会崩，还是老老实实用它release的几个稳定版本tag吧。而且官网的g2o它还提供了自己的cmake module，记得把它加到自己的CMAKE_MODULE_PATH。用如下类似的command:</p>
<center> 
    list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/ cmake_module_dir) </center>
&nbsp;&nbsp;&nbsp;&nbsp;Jaja，用自己写的find_package(g2o)是找不全那个G2O的，而且有时候header files也找不到。劝你还是添加官网提供的FindG2O.cmake模块吧。使用官网提供的模块后，所有G2O全部就大写了。不过官网是没有${G2O_LIBRARIES}或者${G2O_LIBS}这两个变量的，你只能一个一个选择，比如${G2O_STUFF_LIBRARY}，${G2O_CORE_LIBRARY}，${G2O_CLI_LIBRARY}，${G2O_SOLVER_CHOLMOD}等。或者根据官网cmake模块中有的libraries自己设置那2个变量，如：set(G2O_LIBRARIES ${G2O_STUFF_LIBRARY} ${G2O_CORE_LIBRARY}...)来使用。
<h3 id="4-debug-cmakeliststxt-文件"><strong>4. Debug CMakeLists.txt 文件</strong></h3>
<p>    有时候，真的能给CMAKE跪下了。它说明文档里有些说能用的功能，然后用不了，作为一个小白，我只能说一个一个尝试，交学费，把能用的自己记录下来：</p>
<ol>
<li>set(CMAKE_FIND_DEBUG_MODE TRUE)</li>
<li>message(STATUS &quot;var: ${var}&quot;) 用这个命令check你是否真的find那个package，它相关的头文件和库文件是否存在。</li>
</ol>
<h3 id="5-compile-new-package"><strong>5. Compile New Package</strong></h3>
<p>    这里再记录下每次安装新package需要的步骤。当然，如果ubuntu的自带包管理可以直接安装，就直接安装啦。</p>
<ol>
<li>download source code, like: <strong>git clone https://xxxxx</strong></li>
<li>inside directory: <strong>mkdir build &amp; cd build</strong></li>
<li><strong>cmake ..</strong> (.. 表示上层目录)</li>
<li><strong>make</strong></li>
<li><strong>sudo make install</strong> ( 如果不想装系统路径下，那么在CMake里find_package记得注明package当前的path)</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://altfool.github.io/post/hello-gridea/</id>
        <link href="https://altfool.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-08T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Markdown cheat sheet link: https://www.markdownguide.org/cheat-sheet/</p>
<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>Markdown cheat sheet link: https://www.markdownguide.org/cheat-sheet/</p>
<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>